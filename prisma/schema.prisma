generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences and settings
  preferences   UserPreference?
  companions    Companion[]    @relation("UserCompanions")
  conversations Conversation[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id                   String  @id @default(cuid())
  userId               String  @unique
  communicationMode    String  @default("text") // text, voice, or both
  preferredLanguage    String  @default("en")
  theme                String  @default("light")
  notificationsEnabled Boolean @default(true)
  dataRetentionDays    Int     @default(30)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Companion {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  instructions String  @db.Text
  seed        String  @db.Text
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("UserCompanions", fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@index([userId])
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  companionId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([companionId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String   @db.Text
  role           String   // user or assistant
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}